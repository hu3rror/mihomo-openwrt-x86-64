name: Build Mihomo ipk

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

permissions:
  actions: write
  contents: write

jobs:
  build:
    name: Build ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64_generic
          - arch: x86_64

    steps:
      - name: Checkout source tree
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt update
          sudo apt install build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget jq

      - name: Generate build keys
        run: |
          sudo apt-get update
          sudo apt-get install -y signify-openbsd
          signify-openbsd -G -n -c 'DO NOT USE - OpenWrt packages feed CI' -p packages_ci.pub -s packages_ci.sec
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "KEY_BUILD<<$EOF" >> $GITHUB_ENV
          cat packages_ci.sec >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV

      - name: Setup latest golang release
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Show go version
        run: |
          go version

      - name: Get latest mihomo version
        run: |
          TAG=$(curl -s "https://api.github.com/repos/MetaCubeX/mihomo/tags" | jq -r '.[0].name' | tr -d 'v')
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build
        run: |
          if [ "${{ matrix.arch }}" == "aarch64_generic" ]; then
            SDK=$(curl -s -L https://downloads.immortalwrt.org/snapshots/targets/rockchip/armv8/sha256sums | grep sdk | sed 's/.* \*//')
            wget https://downloads.immortalwrt.org/snapshots/targets/rockchip/armv8/$SDK -O sdk.tar.xz
          elif [ "${{ matrix.arch }}" == "x86_64" ]; then
            SDK=$(curl -s -L https://downloads.immortalwrt.org/snapshots/targets/x86/64/sha256sums | grep sdk | sed 's/.* \*//')
            wget https://downloads.immortalwrt.org/snapshots/targets/x86/64/$SDK -O sdk.tar.xz
          fi

          mkdir sdk
          tar -I zstd -xf sdk.tar.xz --strip-components=1 -C sdk
          cd sdk
          ./scripts/feeds update -a
          wget https://downloads.immortalwrt.org/snapshots/targets/${{ matrix.arch }}/config.buildinfo -O .config
          make defconfig
          cp -a ../net package/
          sed -i 's/PKG_VERSION:=stable/PKG_VERSION:=${{ env.TAG }}/g' package/net/mihomo/Makefile
          cat package/net/mihomo/Makefile
          make package/net/mihomo/{download,check} FIXUP=1 V=s
          cat package/net/mihomo/Makefile
          make package/net/mihomo/compile V=s

          FN=$(find bin/packages -name '*.ipk' | xargs basename)
          echo "PKG_NAME=$FN" >> $GITHUB_ENV
          cd -

      - name: Publishing to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}
          path: |
            sdk/bin/packages/*/*/mihomo*.ipk

      - name: Read release.md and use it as a body of new release
        id: read_release
        shell: bash
        run: |
          r=$(cat README.md)
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT

      - name: Publishing to GitHub Releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: sdk/bin/packages/*/*/mihomo*.ipk
          tag: release
          file_glob: true
          overwrite: true
          body: |
            ${{ steps.read_release.outputs.RELEASE_BODY }}
